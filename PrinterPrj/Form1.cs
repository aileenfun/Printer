using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO.Ports;
using System.Net.Sockets;
using System.Net;
using System.IO;
using System.Threading;
using System.Globalization;
using Printer;
using Printer.JPL_Set;
using Printer.ESC_Set;

namespace PC_Demo
{
    public partial class Form1 : Form
    {
        private JQPrinter printer = null;
        private SerialPort port = new SerialPort();
        public Form1()
        {
            InitializeComponent();
            comboBoxBaudrate.Items.Add("1200");
            comboBoxBaudrate.Items.Add("2400");
            comboBoxBaudrate.Items.Add("4800");
            comboBoxBaudrate.Items.Add("9600");
            comboBoxBaudrate.Items.Add("12900");
            comboBoxBaudrate.Items.Add("38400");
            comboBoxBaudrate.Items.Add("57600");
            comboBoxBaudrate.Items.Add("115200");
            comboBoxBaudrate.Items.Add("230400");
            comboBoxBaudrate.SelectedIndex = 7;

            string[] portNames = SerialPort.GetPortNames();

            if (portNames.Length > 0)
            {
                int sel = 0;
                for (int i = 0; i < portNames.Length; i++)
                {
                    this.comboBoxPortName.Items.Add(portNames[i]);
                    if (portNames[i] == PrinterPrj.Properties.Settings.Default.comport)
                        sel = i;
                }
                comboBoxPortName.SelectedIndex = sel;
            }
   
            this.buttonEnforcement.Enabled = false;
            this.buttonImage.Enabled = false;
            this.btn_dust_prn.Enabled = false;
            
        }

        private void jpl_test()
        {
            printer.jpl.page.start(0, 0, 575, 300, JPL.PAGE_ROTATE.x0);
            //*
            printer.jpl.text.drawOut(0, 0, "打印机测试");
            printer.jpl.text.drawOut(24, 24, "打印机测试ABC", 48, true, false, false, false, JPL.TEXT_ENLARGE.x1, JPL.TEXT_ENLARGE.x1, JPL.ROTATE.x0);
            printer.jpl.graphic.line(new Point(0, 0), new Point(100, 100), 2);
            //printer.jpl.barcode.code128(0, 96, 60, Barcode.BAR_UNIT.x2, BAR_ROTATE.ANGLE_0, "2012-23234-3242342342");
            printer.jpl.barcode.code128(ALIGN.CENTER, 96, 60, JPL.BAR_UNIT.x2, JPL.BAR_ROTATE.ANGLE_0, "101213-12312312-231313");

            printer.jpl.image.drawOut(0, 200, "0.bmp", JPL.IMAGE_ROTATE.x0, JPL.IMAGE_ENLARGE.x2, JPL.IMAGE_ENLARGE.x2);

            printer.jpl.page.end();
            printer.jpl.page.print();
            printer.jpl.feedNextLabelBegin();
        }

        private byte[] logo_data = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,
			0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03,
			0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x03, 0x03, 0x07, 0x0F, 0x0F, 0x1F, 0x1E, 0x3F, 0x3D, 0x7C,
			0x7F, 0xFF, 0xF0, 0xF8, 0xFC, 0xFE, 0xEE, 0xE0, 0xFC, 0xFD, 0xFD,
			0xFF, 0xFF, 0xFF, 0xBF, 0x81, 0xEF, 0xAF, 0x81, 0xFF, 0xE1, 0x81,
			0xC5, 0xC9, 0xFD, 0xF9, 0xF3, 0xE0, 0xF8, 0xFE, 0xFC, 0xE1, 0xF7,
			0xFF, 0xFF, 0xFB, 0xFC, 0x7C, 0x7E, 0x3F, 0x3E, 0x1F, 0x1F, 0x0F,
			0x0F, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
			0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0x7E, 0xFA, 0xF9, 0xFC, 0xE2, 0xD9,
			0x9D, 0xDD, 0x43, 0x3F, 0x0F, 0x2F, 0x3F, 0x3F, 0xBF, 0x3E, 0xFE,
			0xFC, 0x7C, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0,
			0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0,
			0xF0, 0xF0, 0xF0, 0xF8, 0x78, 0x78, 0x7C, 0x7C, 0xFE, 0x1E, 0x7F,
			0xEF, 0xC7, 0x9F, 0x1B, 0xC3, 0x8F, 0xBF, 0xFF, 0xFF, 0xFE, 0xFC,
			0xF9, 0xFD, 0x7E, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x0F, 0x3F, 0x7F, 0xFF, 0xFC, 0xFE, 0xF7, 0xF3, 0xB0,
			0x32, 0x33, 0x93, 0xCF, 0xDF, 0x7F, 0x7E, 0xFC, 0xF8, 0xF1, 0xE0,
			0xC0, 0xC0, 0x80, 0x00, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07,
			0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x80, 0xC0, 0xE0,
			0xF0, 0xF0, 0xF8, 0xFC, 0x7F, 0x3F, 0x9F, 0xBF, 0x07, 0x04, 0xCE,
			0xD0, 0xF7, 0xF1, 0xFE, 0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x03, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
			0xDF, 0x9F, 0x8F, 0xAF, 0x27, 0x3F, 0x3F, 0xFF, 0xFE, 0xF8, 0xF0,
			0xC7, 0x01, 0x00, 0x1C, 0x7F, 0xFF, 0x01, 0x01, 0x03, 0x33, 0xF7,
			0xF6, 0xF6, 0xE6, 0xE6, 0xCC, 0x89, 0x02, 0x04, 0x04, 0x08, 0x00,
			0x10, 0x10, 0x00, 0x00, 0x20, 0x21, 0x21, 0x21, 0x21, 0x20, 0x20,
			0x00, 0x10, 0x10, 0x00, 0x08, 0x04, 0x04, 0x02, 0x85, 0xC6, 0xE6,
			0xE6, 0xF7, 0xF7, 0x73, 0x3B, 0x01, 0x00, 0x01, 0xFF, 0x3F, 0x08,
			0x00, 0x83, 0xC3, 0xF0, 0xFC, 0xFF, 0x7F, 0x1F, 0xBB, 0x38, 0x5A,
			0x11, 0xF7, 0xF1, 0xFD, 0xFF, 0xFF, 0xFF, 0x1F, 0x07, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0x9A, 0x9C, 0x8C, 0x85, 0xB7, 0x7F,
			0xFF, 0xFF, 0xF8, 0xC0, 0x07, 0x07, 0x01, 0xF8, 0xFE, 0x1F, 0x03,
			0xE6, 0xCC, 0x9C, 0x9C, 0x39, 0x38, 0x30, 0x62, 0x58, 0x20, 0x40,
			0x80, 0x00, 0x07, 0x07, 0x04, 0x04, 0x04, 0x07, 0x06, 0x03, 0x0F,
			0xFF, 0x30, 0x10, 0x10, 0xF8, 0xFF, 0x0F, 0x03, 0x06, 0x07, 0x04,
			0x04, 0x04, 0x06, 0x07, 0x00, 0x80, 0x40, 0x30, 0x6C, 0x33, 0x38,
			0x19, 0x9C, 0x9C, 0xCC, 0xE6, 0xE3, 0x01, 0x3F, 0xFE, 0xF8, 0x01,
			0x0F, 0x01, 0xC0, 0xFC, 0xFF, 0xFF, 0x4F, 0x92, 0x3E, 0x3E, 0x96,
			0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x24, 0x2D, 0xAC, 0xA9, 0xA1, 0xFF, 0xFF, 0xFF, 0xE3, 0x00, 0x00,
			0x87, 0xF1, 0xF8, 0x7C, 0x1E, 0xC7, 0x8F, 0x38, 0x71, 0x63, 0xE7,
			0xCC, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0xFB, 0x01, 0xFE, 0xFC, 0xF8, 0x00, 0x01, 0x01,
			0x00, 0xF8, 0xFC, 0x02, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x80, 0xE7, 0x63, 0x71,
			0x38, 0x1E, 0xC7, 0x87, 0x3E, 0x7C, 0xF8, 0xE3, 0x0F, 0x00, 0x00,
			0xFF, 0xFF, 0xFF, 0x6C, 0xEB, 0xEB, 0xEB, 0x09, 0x6E, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xA1, 0x3C, 0xBC,
			0x1D, 0xE1, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0xC0, 0xF3, 0xF1, 0x79,
			0x38, 0x9C, 0x9E, 0x7E, 0xE0, 0x80, 0x0F, 0x7F, 0x1E, 0xC1, 0x10,
			0x02, 0x01, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x06, 0x06, 0x0A, 0x12,
			0x12, 0x26, 0x44, 0x08, 0x90, 0x30, 0x10, 0x90, 0x08, 0x04, 0x22,
			0x13, 0x03, 0x0B, 0x07, 0x03, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x01,
			0x04, 0x31, 0x04, 0x7F, 0x1F, 0x80, 0xE0, 0x7F, 0x1E, 0xCE, 0x1C,
			0x3C, 0x78, 0xF1, 0xE0, 0x80, 0x01, 0x1F, 0xFF, 0xFF, 0xFD, 0x49,
			0x29, 0xA5, 0xA4, 0x2F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
			0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xF9, 0xF9,
			0xFC, 0xFF, 0xFE, 0x3F, 0x0F, 0x83, 0xC0, 0xE8, 0x66, 0x77, 0x73,
			0x33, 0x13, 0xF9, 0xF9, 0x05, 0xF0, 0xFC, 0x7F, 0x1F, 0x81, 0x00,
			0x20, 0x00, 0x08, 0x04, 0x04, 0x02, 0x02, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x02, 0x04,
			0x00, 0x08, 0x10, 0x20, 0x41, 0x8F, 0x3F, 0xFC, 0xF8, 0x00, 0xFC,
			0xF9, 0x19, 0x19, 0x33, 0x73, 0x76, 0x74, 0xE0, 0xC1, 0x03, 0x0F,
			0x7E, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFE, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0,
			0xF8, 0xFE, 0xFF, 0xE7, 0x4F, 0x0F, 0x8F, 0x03, 0x31, 0x03, 0x63,
			0xF7, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x8E, 0x87, 0xC3, 0xD1, 0xD8,
			0xDC, 0xCC, 0xCE, 0xCE, 0xCE, 0xCE, 0x4E, 0x1E, 0x1E, 0x1E, 0x1E,
			0x1E, 0x1C, 0x1C, 0x19, 0x1A, 0x14, 0x14, 0x08, 0x08, 0x18, 0x18,
			0x38, 0x38, 0x39, 0x3D, 0x3C, 0x1E, 0x1E, 0x1E, 0x1F, 0x0F, 0x4F,
			0xCF, 0xCF, 0xCF, 0xCF, 0xCE, 0xCE, 0xCC, 0xC8, 0xD1, 0xC3, 0x87,
			0x0F, 0x1F, 0x3F, 0xFF, 0xEF, 0xC1, 0x81, 0x01, 0x01, 0x01, 0x00,
			0x00, 0x00, 0x03, 0x8F, 0xDF, 0xFC, 0xF8, 0xE0, 0x80, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
			0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xF9, 0xF1, 0xC0,
			0x88, 0x04, 0x00, 0x00, 0x80, 0xC1, 0xC0, 0xE0, 0x71, 0x3F, 0x3F,
			0x1F, 0x1F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x43, 0xC3, 0x83, 0x03,
			0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x83,
			0xC3, 0x63, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x3F,
			0x39, 0x70, 0xE2, 0xF9, 0xC8, 0xC0, 0xC6, 0xD4, 0x90, 0xF9, 0xFC,
			0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0x80,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xC0, 0xC0, 0xE0, 0xF0, 0x78, 0x38, 0x0C, 0x0C,
			0x1E, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0x7C,
			0x7C, 0x38, 0x00, 0x0E, 0x3A, 0x32, 0x82, 0x8E, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x87, 0x8B, 0xCB, 0x03, 0x00, 0xD0,
			0xD2, 0x92, 0xDE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F,
			0x02, 0x06, 0x0C, 0x9C, 0x18, 0x30, 0x70, 0x60, 0xC0, 0x80, 0x80,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0,
			0xF0, 0x70, 0x70, 0x70, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
			0xF0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x60, 0x60, 0xE0, 0xE0, 0xC0,
			0xC0, 0xC0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00,
			};


        private void esc_Enforcement_test()
        {
           
            printer.wakeUp();
            printer.esc.image.drawOut(32, 0, 106, 106, ESC.IMAGE_ENLARGE.NORMAL, logo_data);
            //printer.esc.text.printOut(150, 29, ESC.FONT_HEIGHT.x24, true, ESC.TEXT_ENLARGE.HEIGHT_WIDTH_DOUBLE, "卫生行政执法文书");
            //ESC.LINE_POINT[] lines = new ESC.LINE_POINT[1];
            //lines[0] = new ESC.LINE_POINT(0, 575);

            //for (int i = 0; i < 4; i++)
            //{
            //    printer.esc.graphic.linedrawOut(lines);
            //}
            //printer.esc.feedDots(4);
            //printer.esc.text.printOut(ALIGN.CENTER, ESC.FONT_HEIGHT.x24, true, ESC.TEXT_ENLARGE.NORMAL, "现场检测笔录");
            //printer.esc.barcode.code128_auto_printOut(ALIGN.CENTER, ESC.BAR_UNIT.x3, 56, ESC.BAR_TEXT_POS.BOTTOM, ESC.BAR_TEXT_SIZE.ASCII_8x16, "A02161645760");

            //printer.esc.text.printOut("被检查人：上海济强电子科技有限公司");
            //printer.esc.text.printOut("联系电话：13371967607" + "   邮政编码：201206");
            //printer.esc.text.printOut("法定代表人(或责任人)：张三" + "   职务：总经理");
            //printer.esc.text.printOut("检查机关：浦东1队");
            //DateTime date = DateTime.Now;
            //printer.esc.text.printOut("检查时间：" + date.ToLongDateString().ToString());
            //printer.esc.text.printOut("检查地点：浦东金藏路258号2号楼2层\n");
            //printer.esc.text.drawOut("检查人员示证检查，检查记录：\n");
            //printer.esc.text.printOut("    卫生监督员" + "李四" + "和" + "王二" + "在" + "赵大" + "的陪同下,对" +
            //                      "上海济强电子科技有限公司" + "进行了检查，经检查发现：");
            //printer.esc.text.printOut("1.门外有垃圾。\n2.门口有小广告。\n3.厕所未及时清洁。");

            //printer.esc.barcode.barcode2D_QRCode(10, 0, ESC.BAR_UNIT.x3, 0, 2, "QRCode测试");

            //String fileName = "c:\\a.bmp";
            //if (File.Exists(fileName))
            //{
            //    printer.esc.image.drawOut(100,0,fileName);//把图片画到打印机画板
            //    printer.esc.feedEnter();//打印出来
            //}

            //if (File.Exists(fileName))
            //{
            //    printer.esc.image.printOut(150, fileName, true,0);//直接打印出来
            //}

            //printer.esc.feedDots(200);
            //printer.esc.text.printOut("被检查人阅后签名：\n");
            //printer.esc.text.drawOut(0, 16, "日期    年  月  日");
            //printer.esc.text.drawOut(280, 32, "卫生行政机关盖章");
            //printer.esc.text.drawOut(280, 0, date.ToLongDateString().ToString());
            //printer.esc.feedEnter();
            //printer.esc.text.printOut("卫生监督员签名：\n");
            //printer.esc.text.printOut("日期    年  月  日");
            //for (int i = 0; i < 4; i++)
            //{
            //    printer.esc.graphic.linedrawOut(lines);
            //}
            printer.esc.feedDots(4);
            printer.esc.text.printOut(ALIGN.RIGHT, ESC.FONT_HEIGHT.x16, false, ESC.TEXT_ENLARGE.NORMAL, "中华人民共和国卫生部制定");
            printer.esc.feedLines(3);
        }

        private void buttonEnforcement_Click(object sender, EventArgs e)
        {
            if (printer == null)
                return;
            this.buttonEnforcement.Enabled = false;
            //if (!printer.Open(1, 57600, 1000))
            //return;
            if (!printer.isOpen)
                return;

            esc_Enforcement_test();
            this.buttonEnforcement.Enabled = true;
        }
        private void printtablecontent()
        {
            FileStream fs=null;
            StreamReader sr=null;
            try
            {
                fs = new FileStream("printf.txt", FileMode.Open);
                sr = new StreamReader(fs);
            }
            catch (Exception ex)
            {
                fs.Close();
                sr.Close();
                return;
            }
            string temp;
            temp=sr.ReadLine();
            sr.Close();
            fs.Close();
            var parts = temp.Split(',');
            string testloc = parts[0];
            string testOperator = parts[1];
            DateTime starttime;
            DateTime stoptime;
            TimeSpan testperoid;
            
            string pattern = "yyyy/MM/dd  HH:mm:ss";
            DateTime.TryParseExact((string)parts[2], pattern, null, DateTimeStyles.None, out starttime);
            DateTime.TryParseExact((string)parts[3], pattern, null, DateTimeStyles.None, out stoptime);
            testperoid = stoptime - starttime;
            double []data={0,0,0,0,0,0};
            data[0] = double.Parse(parts[4]);//pAMax
            data[1] = double.Parse(parts[5]);//pAMin
            data[2] = double.Parse(parts[6]);//pAAvg
            data[3] = double.Parse(parts[7]);//mAMax
            data[4] = double.Parse(parts[8]);//mAMin
            data[5] = double.Parse(parts[9]);//mAAvg
            //yield return new KeyValuePair<
            DateTime date = DateTime.Now;
            
            printer.wakeUp();
            prnLine(4);
            printer.esc.text.printOut(ALIGN.CENTER, ESC.FONT_HEIGHT.x24, true, ESC.TEXT_ENLARGE.HEIGHT_WIDTH_DOUBLE, "粉尘浓度检测报告单");
            printer.esc.text.printOut(ALIGN.RIGHT, ESC.FONT_HEIGHT.x16, false, ESC.TEXT_ENLARGE.HEIGHT_WIDTH_DOUBLE, 
                 date.ToLongDateString().ToString() + date.ToLongTimeString().ToString());

            printer.esc.feedDots(4);
            printer.esc.text.printOut("测试地点："+testloc+"\t"+"测试人员:"+testOperator);
            printer.esc.text.printOut("\n");

            printer.esc.text.printOut(ALIGN.CENTER, ESC.FONT_HEIGHT.x16, false, ESC.TEXT_ENLARGE.HEIGHT_WIDTH_DOUBLE, "监测时间");
            printer.esc.feedDots(2);
            printer.esc.text.printOut("开始时间:" + starttime.ToLongDateString().ToString() + starttime.ToLongTimeString().ToString());
            printer.esc.text.printOut("结束时间:" + stoptime.ToLongDateString().ToString() + stoptime.ToLongTimeString().ToString());
            printer.esc.text.printOut("测试时长:" + testperoid.TotalMinutes.ToString("0.00") + " min");
            printer.esc.text.printOut("\n");

            printer.esc.text.printOut(ALIGN.CENTER, ESC.FONT_HEIGHT.x16, false, ESC.TEXT_ENLARGE.HEIGHT_WIDTH_DOUBLE, "测量pA值");
            printer.esc.feedDots(2);
            printer.esc.text.printOut("最高值:" + data[0].ToString("0.0"));
            printer.esc.text.printOut("最低值:"+data[1].ToString("0.0"));
            printer.esc.text.printOut("平均值:" + data[2].ToString("0.0"));

            printer.esc.text.printOut(ALIGN.CENTER, ESC.FONT_HEIGHT.x16, false, ESC.TEXT_ENLARGE.HEIGHT_WIDTH_DOUBLE, "测量mA值");
            printer.esc.feedDots(2);
            printer.esc.text.printOut("最高值:" + data[0].ToString("0.0"));
            printer.esc.text.printOut("最低值:" + data[1].ToString("0.0"));
            printer.esc.text.printOut("平均值:" + data[2].ToString("0.0"));
            prnLine(4);
            printer.esc.feedLines(3);

            }
        private void esc_dust_test()
        {
            double[] ddData ={1.25,
                                 3.543,
                                 6.78,
                                 0.012,
                                 0.3698,
                                 0.1125};

            double[] dddd = new double[20];

            printer.wakeUp();
            printer.esc.text.printOut(ALIGN.CENTER, ESC.FONT_HEIGHT.x24, true, ESC.TEXT_ENLARGE.HEIGHT_WIDTH_DOUBLE, "颗粒物浓度");
            prnLine(4);
            printer.esc.feedDots(4);
            printer.esc.text.printOut(ALIGN.CENTER, ESC.FONT_HEIGHT.x24, true, ESC.TEXT_ENLARGE.NORMAL, "现场检测笔录");
            printer.esc.barcode.code128_auto_printOut(ALIGN.CENTER, ESC.BAR_UNIT.x3, 56, ESC.BAR_TEXT_POS.BOTTOM, ESC.BAR_TEXT_SIZE.ASCII_8x16, "A01234565432");

            printer.esc.text.printOut("企业名称：###有限公司");
            DateTime date = DateTime.Now;
            printer.esc.text.printOut("检查时间：" + date.ToLongDateString().ToString()+date.ToLongTimeString().ToString());
            printer.esc.text.printOut("监测地点：1号楼");

            printer.esc.feedDots(6);
            prnLine(2);
            printer.esc.feedDots(4);
            string strTile = "序号\t数据";
            printer.esc.text.printOut(strTile);
            for (int i = 0; i < 5; i++)
            {
                string strData = (i+1).ToString() +  "\t" + ddData[i].ToString();
                printer.esc.text.printOut(strData);
            }

            printer.esc.feedDots(4);
            printer.esc.text.printOut("被检查人阅后签名：\n");
            printer.esc.text.drawOut(0, 16, "日期    年  月  日");
            //printer.esc.text.drawOut(280, 32, "盖章");
            //printer.esc.text.drawOut(280, 0, date.ToLongDateString().ToString());
            printer.esc.feedEnter();
            printer.esc.text.printOut("监督员签名：\n");
            printer.esc.text.printOut("日期    年  月  日");

            prnLine(4);
            printer.esc.feedDots(4);
            printer.esc.text.printOut(ALIGN.RIGHT, ESC.FONT_HEIGHT.x16, false, ESC.TEXT_ENLARGE.NORMAL, "中国电子科技集团公司第三十二研究所");
            printer.esc.feedLines(3);
        }
        private void btnDustPrn_Click(object sender, EventArgs e)
        {
            
            if (printer == null)
                return;
            this.btn_dust_prn.Enabled = false;
            //if (!printer.Open(1, 57600, 1000))
            //return;
            if (!printer.isOpen)
                return;

            //esc_dust_test();
            printtablecontent();
            this.btn_dust_prn.Enabled = true;
        }

        private void prnLine(int n)
        {
            ESC.LINE_POINT[] lines = new ESC.LINE_POINT[1];
            lines[0] = new ESC.LINE_POINT(0, 575);

            if (n < 0)
            {
                return;
            }
            for (int i = 0; i < n; i++)
            {
                printer.esc.graphic.linedrawOut(lines);
            }
            //printer.esc.feedDots(4);
        }
        private void esc_image_test()
        {

            printer.esc.wakeUp();
            //printer.esc.image.printOutFast(50, "Gongzhang288.jpg", 0, 50);
            printer.esc.image.printOut(50, "bird120.jpg", 0);
            prnLine(1);
            //printer.esc.feedDots(4);
            printer.esc.image.drawOut(10, 0, 106, 106, ESC.IMAGE_ENLARGE.NORMAL, logo_data);
            prnLine(2);
            //printer.esc.feedDots(4);
            printer.esc.image.drawOut(150, 20,"0.bmp");
            //printer.esc.feedDots(4);
            prnLine(3);

        }

        private void buttonImage_Click(object sender, EventArgs e)
        {
            if (printer == null)
                return;
            if (!printer.Open())
                return;
            esc_image_test();
        }
        

        private void buttonPortOpen_Click(object sender, EventArgs e)
        {
            if (port == null)
                return;
            if (port.IsOpen)
            {
                port.Close();
               
                buttonPortOpen.Text = "打开";
         
                this.buttonEnforcement.Enabled = false;
                this.buttonImage.Enabled = false;
                this.btn_dust_prn.Enabled = false;
       
            }
            else
            {
                port.PortName = this.comboBoxPortName.SelectedItem.ToString();
                port.BaudRate = int.Parse(this.comboBoxBaudrate.SelectedItem.ToString());
                port.ReadTimeout = 500;
                port.ReadBufferSize = 2048;
                try
                {
                    //port.DiscardOutBuffer();
                    //port.Dispose();

                    port.Open();
                }
                catch(Exception ex)
                {
                    MessageBox.Show("串口打开失败！");
                }

                if (port.IsOpen)
                {
                    PrinterPrj.Properties.Settings.Default.comport = port.PortName;
                    PrinterPrj.Properties.Settings.Default.Save();
                    printer = new JQPrinter(PRINTER_TYPE.JLP351, port);

                    if (null != printer)
                    {
                        buttonPortOpen.Text = "关闭";

                        this.buttonEnforcement.Enabled = true;
                        this.buttonImage.Enabled = true;
                        this.btn_dust_prn.Enabled = true;
                    }
                }
            }
        }

        private void btn_preview_Click(object sender, EventArgs e)
        {

        }
    }
}
